/*ENEB 451 - Network Security
Project 1 - SHA256
Ricardo Rabello*/

#include <crypt.h>
#include <math.h>

#define SHA_SIZE 256; //this indicates SHA-256
static __uint32_t dataTotalBitSize, count, paddingSize;



/*Padd data with zeros until data bit size
    Parameters:
    dataToPad - a pointer to data to be padded
    zeros - how many zeros to pad
    Returns nothing
*/
void zeroPadding(unsigned char * dataToPad, int zeros)
{

}

/*Pre processing function converts a char array and converts to a bit array
    Parameters:
    message - a pointer to a message array.
    receiverBuffer - a pointer to a buffer that will receive the processed message back
    Returns 1 if conversion was sucessfull, 0 if fails.
*/
int SHA256preProcessing(unsigned char* message, unsigned long long* receivereBuffer)
{
    _Bool breakMessage = 0;
    __uint32_t i = 0;
    /*STEP 1 - get the original message and append a 0x1 */
    for(count = 0 ; message[count] != 0 ; count++)
    {
        count++;
    }

    /*STEP 2 - save the message size in bits on dataTotalBitSize variable*/
    dataTotalBitSize *= (count * 8 * sizeof(message));

    /*STEP 3 - check if message is (A MULTIPLE OF 512) MINUS 64*/
    paddingSize = dataTotalBitSize % 512;
    if (paddingSize < 448) //if data to pad is more than 64-bits
    {
        zeroPadding(message, 448 - paddingSize);
    }

    return 0;
}

int main(void)
{
    static char *msg = "hello world";
    static unsigned long long buff[64];
    SHA256preProcessing(msg, buff);
    return 0;
}